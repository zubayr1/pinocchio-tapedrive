//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use bytemuck::{Pod, Zeroable};

#[derive(Copy, Clone, Debug, Eq, PartialEq, Pod, Zeroable)]
#[repr(C)]
pub struct UseMethod {
    pub variant: u8, // 0 = Burn, 1 = Multiple, 2 = Single
    pub _padding: [u8; 7],
}

impl UseMethod {
    pub const BURN: u8 = 0;
    pub const MULTIPLE: u8 = 1;
    pub const SINGLE: u8 = 2;
    
    pub fn new(variant: u8) -> Self {
        Self { 
            variant,
            _padding: [0; 7],
        }
    }
    
    pub fn is_burn(&self) -> bool {
        self.variant == Self::BURN
    }
    
    pub fn is_multiple(&self) -> bool {
        self.variant == Self::MULTIPLE
    }
    
    pub fn is_single(&self) -> bool {
        self.variant == Self::SINGLE
    }
}