//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::api::metadata::use_method::UseMethod;
use bytemuck::{Pod, Zeroable};

#[derive(Copy, Clone, Debug, Eq, PartialEq, Pod, Zeroable)]
#[repr(C)]
pub struct Uses {    
    pub use_method: UseMethod,
    pub remaining: u64,
    pub total: u64,
    pub present: u8,
    pub _padding: [u8; 7],
}

impl Uses {
    pub const NONE: u8 = 0;
    pub const SOME: u8 = 1;
    
    pub fn none() -> Self {
        Self {
            present: Self::NONE,
            _padding: [0; 7],
            use_method: UseMethod::new(0),
            remaining: 0,
            total: 0,
        }
    }
    
    pub fn some(use_method: UseMethod, remaining: u64, total: u64) -> Self {
        Self {
            present: Self::SOME,
            _padding: [0; 7],
            use_method,
            remaining,
            total,
        }
    }
    
    pub fn is_some(&self) -> bool {
        self.present == Self::SOME
    }
    
    pub fn is_none(&self) -> bool {
        self.present == Self::NONE
    }
}